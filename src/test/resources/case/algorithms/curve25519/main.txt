class Curve25519 {

    fn reduceQuick(x: Array<i32>): unit {
        var temp: Array<i32> = new Array<i32>(10);
        var index: u32 = 0;
        var carry: i32 = 19;

        while index < 10 {
            carry = carry + x.get(index);
            temp.set(index, carry & 67108863);
            carry = System.shr(carry, 26u32);
            index = index + 1;
        };

        var mask: i32 = -{ System.shr(temp.get(9), 21u32) & 1 };
        temp.set(9, temp.get(9) & 2097151);
        index = 0;

        while index < 10 {
            x.set(index, x.get(index) & ~mask | temp.get(index) & mask);
            index = index + 1;
        };
    }

    fn reduce(result: Array<i32>, x: Array<i32>, size: u32): unit {
        var index: u32 = 0;
        var carry: i32 = 0;
        var limb: i32 = System.shr(x.get(9), 21u32);
        x.set(9, x.get(9) & 2097151);

        while index < size {
            limb = limb + { System.shl(x.get(10 + index), 5i32) };
            carry = carry + { { limb & 67108863 } * 19 + x.get(index) };
            x.set(index, carry & 67108863);
            limb = System.shr(limb, 26u32);
            carry = System.shr(carry, 26u32);
            index = index + 1;
        };
        if size < 10 {
            index = size;

            while index < 10 {
                carry = carry + x.get(index);
                x.set(index, carry & 67108863);
                carry = System.shr(carry, 26u32);
                index = index + 1;
            };
        } else {};
        carry = { System.shr(x.get(9), 21u32) } * 19;
        x.set(9, x.get(9) & 2097151);
        index = 0;

        while index < 10 {
            carry = carry + x.get(index);
            result.set(index, carry & 67108863);
            carry = System.shr(carry, 26u32);
            index = index + 1;
        };

        this.reduceQuick(result);
    }

    fn multiply(result: Array<i32>, x: Array<i32>, y: Array<i32>): unit {
        var temp: Array<i64> = new Array<i64>(20);
        var i: u32 = 0;
        var j: u32 = 0;
        var v: i64 = System.i2l(x.get(0));
        i = 0;

        while i < 10 {
            temp.set(i, v * System.i2l(y.get(i)));
            i = i + 1;
        };

        i = 1;

        while i < 10 {
            v = System.i2l(x.get(i));
            j = 0;

            while j < 9 {
                temp.set(i + j, temp.get(i + j) + { v * System.i2l(y.get(j)) });
                j = j + 1;
            };

            temp.set(i + 9, v * System.i2l(y.get(9)));
            i = i + 1;
        };

        v = temp.get(0);
        var t2: Array<i32> = new Array<i32>(20);
        t2.set(0, System.l2i(v) & 67108863);
        i = 1;

        while i < 20 {
            v = { System.shr(v, 26) } + temp.get(i);
            t2.set(i, System.l2i(v) & 67108863);
            i = i + 1;
        };

        this.reduce(result, t2, 10);
    }

    fn square(result: Array<i32>, x: Array<i32>): unit {
        this.multiply(result, x, x);
    }

    fn mulA24(result: Array<i32>, x: Array<i32>): unit {
        var a24: i64 = 121665;
        var carry: i64 = 0;
        var index: u32 = 0;
        var t2: Array<i32> = new Array<i32>(20);

        while index < 10 {
            carry = carry + { a24 * System.i2l(x.get(index)) };
            t2.set(index, System.l2i(carry) & 67108863);
            carry = System.shr(carry, 26);
            index = index + 1;
        };

        t2.set(10, System.l2i(carry & 67108863));
        this.reduce(result, t2, 1);
    }

    fn add(result: Array<i32>, x: Array<i32>, y: Array<i32>): unit {
        var index: u32 = 1;
        var carry: i32 = x.get(0) + y.get(0);
        result.set(0, carry & 67108863);

        while index < 10 {
            carry = { System.shr(carry, 26u32) } + x.get(index) + y.get(index);
            result.set(index, carry & 67108863);
            index = index + 1;
        };

        this.reduceQuick(result);
    }

    fn sub(result: Array<i32>, x: Array<i32>, y: Array<i32>): unit {
        var index: u32 = 0;
        var borrow: i32 = 0;

        while index < 10 {
            borrow = x.get(index) - y.get(index) - { System.shr(borrow, 26u32) & 1 };
            result.set(index, borrow & 67108863);
            index = index + 1;
        };

        borrow = result.get(0) - { -{ System.shr(borrow, 26u32) & 1 } & 19 };
        result.set(0, borrow & 67108863);
        index = 1;

        while index < 10 {
            borrow = result.get(index) - { System.shr(borrow, 26u32) & 1 };
            result.set(index, borrow & 67108863);
            index = index + 1;
        };

        result.set(9, result.get(9) & 2097151);
    }

    fn swap(select: i32, x: Array<i32>, y: Array<i32>): unit {
        select = -select;
        {
            var index: u32 = 0;

            while index < 10 {
                var dummy: i32 = select & { x.get(index) ^ y.get(index) };
                x.set(index, x.get(index) ^ dummy);
                y.set(index, y.get(index) ^ dummy);
                index = index + 1;
            };
        }
    }

    fn pow250(result: Array<i32>, x: Array<i32>): unit {
        var A: Array<i32> = new Array<i32>(10);
        var i: i32 = 0;
        var j: i32 = 0;
        this.square(A, x);

        while j < 9 {
            this.square(A, A);
            j = j + 1;
        };

        this.multiply(result, A, x);

        while i < 23 {
            j = 0;

            while j < 10 {
                this.square(A, A);
                j = j + 1;
            };

            this.multiply(result, result, A);
            i = i + 1;
        };

        this.square(A, result);
        this.multiply(result, result, A);
        j = 0;

        while j < 8 {
            this.square(A, A);
            this.multiply(result, result, A);
            j = j + 1;
        };

    }

    fn modInv(result: Array<i32>, x: Array<i32>): unit {
        this.pow250(result, x);
        this.square(result, result);
        this.square(result, result);
        this.multiply(result, result, x);
        this.square(result, result);
        this.square(result, result);
        this.multiply(result, result, x);
        this.square(result, result);
        this.multiply(result, result, x);
    }

    fn curve25519(result: Array<i8>, privateKey: Array<i8>, hasPublicKey: bool, publicKey: Array<i8>): unit {
        var i: u32 = 0;
        var x_1: Array<i32> = new Array<i32>(10);
        var x_2: Array<i32> = new Array<i32>(10);
        var x_3: Array<i32> = new Array<i32>(10);
        var z_2: Array<i32> = new Array<i32>(10);
        var z_3: Array<i32> = new Array<i32>(10);
        var A: Array<i32> = new Array<i32>(10);
        var B: Array<i32> = new Array<i32>(10);
        var C: Array<i32> = new Array<i32>(10);
        var D: Array<i32> = new Array<i32>(10);
        var E: Array<i32> = new Array<i32>(10);
        var AA: Array<i32> = new Array<i32>(10);
        var BB: Array<i32> = new Array<i32>(10);
        var DA: Array<i32> = new Array<i32>(10);
        var CB: Array<i32> = new Array<i32>(10);
        if hasPublicKey {
            i = 0;

            while i < 32 {
                var bit: u32 = i * 8 % 26;
                var word: u32 = i * 8 / 26;
                var value: i32 = System.b2i(publicKey.get(i)) & 255;
                if bit <= 18 {
                    x_1.set(word, x_1.get(word) | { System.shl(value, bit) });
                } else {
                    x_1.set(word, x_1.get(word) | { System.shl(value, bit) });
                    x_1.set(word, x_1.get(word) & 67108863);
                    x_1.set(word + 1, x_1.get(word + 1) | { System.shr(value, 26 - bit) });
                };
                i = i + 1;
            };

            this.reduceQuick(x_1);
            this.reduceQuick(x_1);
        } else {
            x_1.set(0, 9);
        };
        x_2.set(0, 1);
        i = 0;

        while i < 10 {
            x_3.set(i, x_1.get(i));
            i = i + 1;
        };

        z_3.set(0, 1);
        var sposn: u32 = 31;
        var sbit: i32 = 6;
        var svalue: i32 = System.b2i(privateKey.get(sposn)) | 64;
        var swap: i32 = 0;
        var goOn: bool = true;
        while goOn {
            var select: i32 = System.shr(svalue, sbit) & 1;
            swap = swap ^ select;
            this.swap(swap, x_2, x_3);
            this.swap(swap, z_2, z_3);
            swap = select;
            this.add(A, x_2, z_2);
            this.square(AA, A);
            this.sub(B, x_2, z_2);
            this.square(BB, B);
            this.sub(E, AA, BB);
            this.add(C, x_3, z_3);
            this.sub(D, x_3, z_3);
            this.multiply(DA, D, A);
            this.multiply(CB, C, B);
            this.add(x_3, DA, CB);
            this.square(x_3, x_3);
            this.sub(z_3, DA, CB);
            this.square(z_3, z_3);
            this.multiply(z_3, z_3, x_1);
            this.multiply(x_2, AA, BB);
            this.mulA24(z_2, E);
            this.add(z_2, z_2, AA);
            this.multiply(z_2, z_2, E);
            if sbit > 0 {
                sbit = sbit - 1;
            } else if sposn == 0 {
                goOn = false;
            } else if sposn == 1 {
                sposn = 0;
                svalue = System.b2i(privateKey.get(0)) & 248;
                sbit = 7;
            } else {
                sposn = sposn - 1;
                svalue = System.b2i(privateKey.get(sposn));
                sbit = 7;
            };;;
        };
        this.swap(swap, x_2, x_3);
        this.swap(swap, z_2, z_3);
        this.modInv(z_3, z_2);
        this.multiply(x_2, x_2, z_3);
        {
            var index: u32 = 0;

            while index < 32 {
                var bit: u32 = index * 8 % 26;
                var word: u32 = index * 8 / 26;
                if bit <= 18 {
                    result.set(index, System.i2b(System.shr(x_2.get(word), bit)));
                } else {
                    result.set(index, System.i2b(System.shr(x_2.get(word), bit) | System.shl(x_2.get(word + 1), 26 - bit)));
                };
                index = index + 1;
            };
        }
    }

    fn new() super()
}

var alicePrivate: Array<i8> = Test.hex("77076d0a7318a57d3c16c17251b26645df4c2f87ebc0992ab177fba51db92c2a");
var alicePublic: Array<i8> = Test.hex("8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a");
var bobPrivate: Array<i8> = Test.hex("5dab087e624a8a4b79e17f8b83800ee66f3bb1292618b6fd1c2f8b27ff88e0eb");
var bobPublic: Array<i8> = Test.hex("de9edb7d7b7dc1b4d35b61c2ece435373f8343c85b78674dadfc7e146f882b4f");
var shared: Array<i8> = Test.hex("4a5d9d5ba4ce2de1728e3bf480350f25e07e21c947d19e3376f09b3c1e161742");
var output: Array<i8> = new Array<i8>(32);

new Curve25519().curve25519(output, alicePrivate, false, output);
Test.assertArrayEquals(alicePublic, output);

new Curve25519().curve25519(output, bobPrivate, false, output);
Test.assertArrayEquals(bobPublic, output);

new Curve25519().curve25519(output, alicePrivate, true, bobPublic);
Test.assertArrayEquals(shared, output);

new Curve25519().curve25519(output, bobPrivate, true, alicePublic);
Test.assertArrayEquals(shared, output);
