package runtime;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.util.TraceClassVisitor;

import java.io.PrintWriter;
import java.util.List;

/**
 * An instance of some compiled Snuggle code.
 * Encapsulates the concept of compiling and running said code.
 */
public class SnuggleInstance {

    //Generated by compiler
    private SnuggleRuntime runtime;

    //The class loader that holds all the classes for this instance
    private InstanceLoader loader;

    public SnuggleInstance(byte[] runtimeBytes, List<byte[]> otherClasses) {
        loader = new InstanceLoader();
        try {
            runtime = loader.<SnuggleRuntime>defineClass(runtimeBytes).getConstructor().newInstance();
            //new ClassReader(runtimeBytes).accept(new TraceClassVisitor(new PrintWriter(System.out)), ClassReader.SKIP_DEBUG);
            for (byte[] otherClass : otherClasses) {
                loader.defineClass(otherClass);
                //new ClassReader(otherClass).accept(new TraceClassVisitor(new PrintWriter(System.out)), ClassReader.SKIP_DEBUG);
            }

        } catch (Exception impossible) {
            throw new IllegalStateException("Runtime always has default constructor, bug in compiler, please report!");
        }

    }

    public void run() {
        runtime.run();
    }

    //Just exposes a protected method for us
    private static class InstanceLoader extends ClassLoader {
        public <T> Class<T> defineClass(byte[] bytes) {
            return (Class<T>) defineClass(null, bytes, 0, bytes.length);
        }
    }

}
